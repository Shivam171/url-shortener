package com.shvmpk.url_shortener.util;

import com.shvmpk.url_shortener.dto.ShortUrlUpdateRequest;

import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.regex.Pattern;

public class ShortUrlUpdateValidator {
    private static final Pattern ALIAS_PATTERN = Pattern.compile("^[a-z0-9-]*$");
    private static final Pattern PASSWORD_PATTERN =
            Pattern.compile("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#^()_+=\\-]).{8,}$");

    public static void validate(ShortUrlUpdateRequest req) {
        // Alias: if present, must be non-blank and match pattern
        if (req.getAlias() != null) {
            if (req.getAlias().trim().isEmpty()) {
                throw new IllegalArgumentException("Alias must not be just whitespace");
            }
            if (!ALIAS_PATTERN.matcher(req.getAlias()).matches()) {
                throw new IllegalArgumentException("Alias must contain only lowercase letters, numbers, or dashes");
            }
        }

        // Protected URL password rules
        if (Boolean.TRUE.equals(req.getIsProtected())) {
            if (Boolean.FALSE.equals(req.getIsPasswordAutoGenerated())) {
                if (req.getPassword() == null || req.getPassword().trim().isEmpty()) {
                    throw new IllegalArgumentException("Password is required when URL is protected and not auto-generated");
                }
                if (!PASSWORD_PATTERN.matcher(req.getPassword()).matches()) {
                    throw new IllegalArgumentException("Password must be at least 8 characters and include uppercase, lowercase, digit, and special character");
                }
            }
        } else {
            // If not protected, password should not be provided
            if (req.getPassword() != null && !req.getPassword().trim().isEmpty()) {
                throw new IllegalArgumentException("Password should not be provided when URL is not protected");
            }
        }

        // Only one of maxClicks or expiresAt
        if (req.getMaxClicks() != null && req.getExpiresAt() != null && !req.getExpiresAt().trim().isEmpty()) {
            throw new IllegalArgumentException("Choose either maxClicks or expiresAt, not both");
        }

        // expiresAt must be valid ISO and in future
        if (req.getExpiresAt() != null && !req.getExpiresAt().trim().isEmpty()) {
            try {
                LocalDateTime parsed = LocalDateTime.parse(req.getExpiresAt());
                if (!parsed.isAfter(LocalDateTime.now())) {
                    throw new IllegalArgumentException("Expiration date must be a future time");
                }
            } catch (DateTimeParseException e) {
                throw new IllegalArgumentException("Expiration date must be in ISO format (yyyy-MM-dd'T'HH:mm)");
            }
        }

        // maxClicks must be â‰¥ 1
        if (req.getMaxClicks() != null && req.getMaxClicks() < 1) {
            throw new IllegalArgumentException("Max clicks must be at least 1");
        }
    }
}

